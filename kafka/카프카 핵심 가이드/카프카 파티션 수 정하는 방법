## How to Choose the Number of Topics/Partitions in a Kafka Cluster?
https://www.confluent.io/blog/how-choose-number-topics-partitions-kafka-cluster/
 * 일반적으로 카프카 클러스터에 파티션이 많을수록 처리량을 높일 수 있다.
 * 파티션 수를 선택하는 대략적인 공식은 처리랴을 기준으로 한다.
 * 프로듀서: p, 컨슈머: c 라고 할때
 * 단일 파티션에서 달성할 수 있는 전체적인 성과를 측정한다.
 * 목표 처리량이 t 라고 가정하면, 최소한 Max(t/p, t/c) 의 파티션이 필요하다.
 * 많은 파티션의 단점1
   * 각 파티션은 브로커의 파일 시스템 디렉토리에 해당
   * 파티션이 많을 수록 운영체제에서 open file handle limit을 높일 필요가 있다.
* 많은 파티션의 단점2
   * 파티션이 많으면 브로커가 fail 될 경우, 리더 파티션으 ㄹ이동시키는데 더 많은 시간이 소요된다.
   * 운이 나빠 컨트롤러 브로커가 fail 되면, 새로운 컨트롤러가 주키퍼의 모든 파티션 메타데이터를 읽어야 하기 때문에 이 또한 시간이 꽤 소요된다.
   * 이러한 드문 경우에 가용성에 관심이 있다면 브로커당 파티션 수를 2~4천 개로 제한하고 클러스터의 총 파티션 수를 수만 개 이하로 제한하는 것이 좋습니다.
* 많은 파티션의 단점3
   * 더 많은 파티션은 종단 간 지연 시간을 증가시킬 수 있습니다.
   * 종단간 지연은 모든 인-싱크 레플레카에 복제되어야 한다.
     * 기본적으로 두 브로커 간ㅇ 복제본을 공유하는 모든 파티션에 대해 다른 브로커의 데이터 복제에는 단일 스레드를 사용한다.
   * 실험결과, 한 브로커에서 다른 브로커로 1000개  파티션 복제시 20ms 지연이 추가된다.
   * 물론 복제 계수를 낮추면 이 문제는 다소 완화된다.
   * 경험칙상 지연 시간을 고려한다면 브로커당 파티션 수를 100 x b x r로 제한하는 것이 좋습니다. 여기서 b는 Kafka 클러스터의 브로커 수이고 r은 복제 요소입니다. 
* 많은 파티션의 단점4
   * 클라이언트에 더 많은 메모리를 필요로 할 수 있다.
   * 파티션을 늘리면, 프로듀서에 더 많은 메시지를 버퍼링하므로, 프로듀서 메모리에 더 많은 메시지가 쌓인다.
   * 그러다 설정된 메모리를 초과할지도 모른다.
   * 소비자도 마찬가지, 파티션당 메시지 배치를 가져오는데, 파티션이 많을수록 더 많은 메모리가 필요하다.
